services:
  django:
    build:
      context: ../
      dockerfile: ./docker/django/Dockerfile
    container_name: django
    volumes:
      - ../:/workspace
      - ./django/zsh_history:/root/.zsh_history
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      - db
      - migration
    restart: on-failure
    networks:
      - transcendence
    environment:
      - VIRTUAL_HOST=localhost,made-f0Br8s5.clusters.42paris.fr
      - VIRTUAL_PORT=8000
      - TZ=Europe/Paris

  migration:
    build:
      context: ../
      dockerfile: ./docker/django/Dockerfile
    container_name: migration
    volumes:
      - ../:/workspace
    env_file:
      - .env
    depends_on:
      - db
    networks:
      - transcendence
    command: python manage.py migrate --noinput

  db:
    image: postgres:13
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - transcendence
    environment:
      - TZ=Europe/Paris

  prometheus:
    image: prom/prometheus:latest
    user: root
    volumes:
      - prometheus_data:/prometheus
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/alert.rules.yml:/etc/prometheus/alert.rules.yml
    ports:
      - "9090:9090"
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--storage.tsdb.retention.time=30d"
    restart: on-failure
    networks:
      - transcendence
    environment:
      - VIRTUAL_HOST=prometheus.localhost
      - VIRTUAL_PORT=9090

  grafana:
    image: grafana/grafana:latest
    user: root
    env_file:
      - .env
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml
      - ./grafana/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - ./grafana/metrics-dashboard.json:/var/lib/grafana/dashboards/metrics-dashboard.json
    restart: on-failure
    networks:
      - transcendence
    environment:
      - VIRTUAL_HOST=grafana.localhost
      - VIRTUAL_PORT=3000

  node_exporter:
    image: prom/node-exporter:latest
    ports:
      - "9101:9100"
    restart: on-failure
    networks:
      - transcendence
    environment:
      - VIRTUAL_HOST=node-exporter.localhost
      - VIRTUAL_PORT=9100

  postgres_exporter:
    image: prometheuscommunity/postgres-exporter:latest
    env_file:
      - .env
    ports:
      - "9187:9187"
    depends_on:
      - db
    restart: on-failure
    networks:
      - transcendence
    environment:
      - VIRTUAL_HOST=postgres-exporter.localhost
      - VIRTUAL_PORT=9187

  nginx:
    # build:
    #   context: ../
    #   dockerfile: ./docker/nginx/Dockerfile
    image: jwilder/nginx-proxy:alpine
    user: root
    container_name: nginx
    ports:
      # - "8080:80"
      - "8081:443"
    volumes:
      - ${XDG_RUNTIME_DIR}/docker.sock:/tmp/docker.sock:ro
      - ./nginx/certs:/etc/nginx/certs:ro
      - ./nginx/htpasswd:/etc/nginx/htpasswd:ro
    environment:
      - HTTPS_METHOD=redirect
      - DEFAULT_SSL_CERT=/etc/nginx/certs/localhost.crt
      - DEFAULT_SSL_KEY=/etc/nginx/certs/localhost.key
    networks:
      - transcendence

networks:
  transcendence:
    driver: bridge

volumes:
  postgres_data:
  grafana_data:
  prometheus_data:
